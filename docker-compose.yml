services:
  thtgbot:
    build:
      context: .
      dockerfile: app/Dockerfile
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB_INDEX=${REDIS_DB_INDEX}
    networks:
      - redis-net
    volumes:
      - ./app:/app
      - ./config.yaml:/config/config.yaml
      - ./.env:/app/.env

  renderer:
    build:
      context: .
      dockerfile: app/renderer/Dockerfile-renderer
    restart: always
    ports:
      - "8404:8404"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB_INDEX=${REDIS_DB_INDEX}
    networks:
      - redis-net
    volumes:
      - ./app:/app
      - ./config.yaml:/config/config.yaml
      - ./.env:/app/.env

  redis:
    image: "redis:7.4.0-alpine"
    volumes:
      - ./redis_data:/data
    networks:
      - redis-net
    restart: always
    healthcheck:
      # Ready only when Redis is up AND done loading RDB/AOF
      test: [ "CMD-SHELL", "redis-cli -p ${REDIS_PORT} -a '${REDIS_PASSWORD}' ping | grep -q PONG && redis-cli -p ${REDIS_PORT} -a '${REDIS_PASSWORD}' info persistence | grep -q '^loading:0'" ]
      interval: 2s
      timeout: 2s
      retries: 120
      start_period: 2s
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    expose:
      - "${REDIS_PORT}"
    command:
      - 'redis-server'
      - '--save 900 1'
      - '--save 300 100'
      - '--port ${REDIS_PORT}'
      - '--requirepass ${REDIS_PASSWORD}'
  #      - '--bind 0.0.0.0 --protected-mode no'

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8888:8080"
    environment:
      - DOZZLE_USERNAME=${DOZZLE_USERNAME}
      - DOZZLE_PASSWORD=${DOZZLE_PASSWORD}
      - DOZZLE_KEY=${DOZZLE_KEY}
      - DOZZLE_TAILSIZE=${DOZZLE_TAILSIZE}

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - redis-net
    volumes:
      - ./web/frontend/:/web/frontend/
      - ./web/${NGINX_CFG_NAME:-nginx.conf}:/etc/nginx/nginx.conf:ro
      #      - ./web/nginx-test.conf:/etc/nginx/nginx.conf:ro
      - "./web/letsencrypt/${DOMAIN}:/etc/letsencrypt:ro"
    environment:
      CERTBOT_EMAIL: developer@tirinox.ru

  api:
    build:
      context: .
      dockerfile: web/Dockerfile-api
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8077:8077"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB_INDEX=${REDIS_DB_INDEX}
    networks:
      - redis-net
    volumes:
      - ./app:/app
      - ./config.yaml:/config/config.yaml
      - ./.env:/app/.env

  dashboard:
    build:
      context: .
      dockerfile: web/Dockerfile-dashboard
    restart: always
    depends_on:
      redis:
        condition: service_healthy

    ports:
      - "8501:8501"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB_INDEX=${REDIS_DB_INDEX}
    networks:
      - redis-net
    volumes:
      - ./app:/app
      - ./config.yaml:/config/config.yaml
      - ./.env:/app/.env


networks:
  redis-net:

volumes:
  redis_data:
  app:
