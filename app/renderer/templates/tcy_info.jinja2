{% set _width, _height = set_viewport_size(1470, 1000) %}
{% extends "base.jinja2" %}

{% block content %}
    <style>
        .earnings-outer-container {
            display: flex;
            flex-direction: column;
            min-width: 500px;
        }


        .earnings-chart-container {
            padding: 0 14px 14px;
            margin-bottom: 10px;
            min-width: 650px;
            min-height: 490px;
        }

        .price-chart-container {
            padding: 14px;
            min-width: 100px;
            min-height: 100px;
        }

        #tcy-alloc-chart {
            height: 100%;
        }


        .supply-chart {
            position: relative;
            height: 100%;
        }

        .tcy-earnings-legend {
            display: flex;
            flex-direction: row;
            gap: 14px;
            align-items: center;

            justify-content: center;
            padding-bottom: 12px;
        }

        .tcy-earnings-legend-text {
            font-size: 20px;
            text-transform: uppercase;
            letter-spacing: 0.2em;
            color: #ccc;
            font-weight: bolder;
        }

        .pool-color {
            background-color: #FF9933;
        }

        .stake-color {
            background-color: #33FF99;
        }

        .tcy-earnings-legend-circle {
            width: 32px;
            height: 16px;
            border-radius: 8px;
        }

        .item {
            display: flex;
            flex-direction: row;
            gap: 10px;
            font-size: 24px;
            height: 100%;
            padding: 10px;
        }

        .item-title {
            color: #eee;
            font-weight: bolder;
        }

        .item-value {
            color: #fff;
            font-weight: bold;
        }

        .claim-wallet-overlay {
            position: absolute;
            right: 10px;
            top: 10px;
            max-width: 220px;
        }

        .main-container {
            display: flex;
            flex-direction: row;
            /* flex start top */
            align-items: flex-start;
            gap: 16px;
        }

        .column {
            display: flex;
            flex-direction: column;
            gap: 10px;
            flex: 1;
        }

        .columns {
            display: flex;
            flex-direction: row;
            gap: 16px;
            width: 100%;
            flex: 1;
        }

        .chain-state-name {
            font-size: 22px;
            color: #ccc;
        }

        .mimir-container {
            width: 100%;
            margin-top: 4px;
        }

        .block-title {
            display: block;
            color: #999;
            font-size: 24px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.1rem;
            text-align: left;
            width: 100%;
            margin-bottom: 6px;
        }

        .tcy-price {
            color: #fff !important;
        }

        .glow {
            text-shadow: 0 0 4px rgba(0, 225, 255, 0.67), 0 0 8px rgba(0, 187, 255, 0.67), 0 0 12px rgba(0, 140, 255, 0.4);
        }

        .indicator-box {
            display: flex;
            padding: 10px 10px 10px 10px;
            background: rgba(52, 51, 51, 0.21);
            border-radius: 12px;
            font-family: ThorFontLight, serif;
            justify-content: flex-start;
            flex-direction: column;
            align-items: center;
            height: 100%;
        }

        .right-column-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: auto auto;
            gap: 10px;
            margin: auto;
            align-items: stretch;
            height: 100%;
        }

        .right-column-top {
            grid-column: 1 / span 2;
        }

        .apr-title {
            color: #aaa;
            font-size: 29px;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 0.15em;
        }

        .apr-value {
            color: #fff;
            font-size: 50px;
            font-weight: bold;

        }

        .apr-note {
            font-size: 20px;
            font-weight: 300;
            color: #eee;
            padding-top: 5px;
        }

        .earnings-value {
            color: #fff;
            font-size: 42px;
            font-weight: bold;
        }

        .earnings-extra {
            color: #ddd;
            font-size: 28px;
            font-weight: bolder;
        }
    </style>

    <script src="renderer/static/js/lightweight-charts.standalone.production.js"></script>
    <script src="renderer/static/js/echarts.min.js"></script>

    {% with title="TCY INFO" %}
        {% include "components/header.jinja2" %}
    {% endwith %}

    <div class="main-container column">
        <div class="columns">
            <div class="column">
                <div>
                    <div class="block-title">
                        <span>TCY price</span>
                        <span class="tcy-price">
                        ${{ pretty_money(usd_per_tcy) }}
                    </span>
                        <span>
                        | SUPPLY
                    </span>
                        <span class="tcy-price">
                        {{ short_money(tcy_total_supply) }}
                    </span>
                        <span>
                        TCY
                    </span>
                        <span>
                        | MCAP
                    </span>
                        <span class="tcy-price">
                        ${{ short_money(market_cap) }}
                    </span>
                    </div>

                    <div class="price-chart-container shadow-box">
                        <canvas id="tcyPriceChart"></canvas>
                    </div>
                </div>

                <div class="shadow-box">
                    <div class="item">
                        <div class="item-title">TCY is</div>
                        <div class="item-value">{{ pretty_money(percent_of_rune_market_cap) }}%</div>
                        <div class="item-title">of RUNE market cap</div>
                    </div>
                </div>


                <div class="supply-chart shadow-box">
                    <div id="tcy-alloc-chart"></div>

                    {#                    <div class="claim-wallet-overlay">#}
                    {#                        <div class="item">#}
                    {#                            <div class="item-title">Claimed</div>#}
                    {#                            <div class="item-value">#}
                    {#                                {{ pretty_money(vnx.claimed_info.count) }} wallets#}
                    {#                                ({{ short_money(vnx.claimed_info.total * 1e-8) }} TCY)#}
                    {#                            </div>#}
                    {#                        </div>#}
                    {##}
                    {#                        <div class="item">#}
                    {#                            <div class="item-title">Unclaimed</div>#}
                    {#                            <div class="item-value">#}
                    {#                                {{ pretty_money(vnx.unclaim_info.count) }} wallets#}
                    {#                                ({{ short_money(vnx.unclaim_info.total * 1e-8) }} TCY)#}
                    {#                            </div>#}
                    {#                        </div>#}
                    {#                    </div>#}

                </div>
            </div>


            <div class="right-column-grid">
                <div class="right-column-top">
                    <div class="block-title">
                        TCY earnings
                        <span style="color: #fff">
                        <span class="glow">{{ round(status.system_income_bps_to_tcy / 100, 1) }}%</span>
                        of SYSTEM INCOME
                    </span>, USD
                    </div>

                    <div class="shadow-box earnings-outer-container">
                        <div class="earnings-chart-container">
                            <canvas id="tcyEarningsChart"></canvas>
                        </div>
                        <div class="tcy-earnings-legend">
                            <div class="tcy-earnings-legend-circle stake-color"></div>
                            <div class="tcy-earnings-legend-text">Stake earnings</div>
                            <div class="tcy-earnings-legend-circle pool-color"></div>
                            <div class="tcy-earnings-legend-text">Pool earnings</div>
                        </div>
                    </div>
                </div>


                <div class="right-column-bottom-piece">
                    <div class="indicator-box">
                        <div class="apr-title">Earnings (7D)</div>
                        <div class="earnings-value glow">{{ pretty_money(vnx.last_week_earnings * 1e-8) }} RUNE</div>
                        <div class="earnings-extra">
                            ðŸ’°${{ pretty_money(vnx.last_week_earnings * 1e-8 * usd_per_rune) }}
                        </div>
                    </div>
                </div>

                <div class="right-column-bottom-piece">
                    <div class="indicator-box">
                        <div class="apr-title">APR</div>
                        <div class="apr-value glow">ðŸ“ˆ {{ pretty_money(apr_current) }}%</div>
                        <div class="apr-note">Based on last week's earnings</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mimir-container">
            <div class="chain-state-container cbox">
                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_claiming else 'halted' }}"></div>
                    <div class="chain-state-name">CLAIMING</div>
                </div>

                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_claiming_swap else 'halted' }}"></div>
                    <div class="chain-state-name">CLAIMING SWAP</div>
                </div>

                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_staking else 'halted' }}"></div>
                    <div class="chain-state-name">STAKING</div>
                </div>

                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_unstaking else 'halted' }}"></div>
                    <div class="chain-state-name">UNSTAKING</div>
                </div>

                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_stake_distribution else 'halted' }}"></div>
                    <div class="chain-state-name">DISTRIBUTION</div>
                </div>

                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_trading else 'halted' }}"></div>
                    <div class="chain-state-name">TRADING</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        Chart.defaults.font.family = 'ThorFontLight'; // Set the font family for the chart
        Chart.defaults.color = 'rgb(200, 200, 200)'; // Set the font color for the chart

        function plotEarningsChart() {
            // Get the context of the canvas element we want to select
            const ctx = document.getElementById('tcyEarningsChart').getContext('2d');

            const stakeGradient = ctx.createLinearGradient(0, 0, 0, 200);
            stakeGradient.addColorStop(1, '#33FF99'); // Top color
            stakeGradient.addColorStop(0, '#00CCFF'); // Bottom color

            const poolGradient = ctx.createLinearGradient(0, 0, 0, 200);
            poolGradient.addColorStop(1, '#FF9933'); // Top color
            poolGradient.addColorStop(0, '#ff3388'); // Bottom color

            const earnings = {{ earnings|safe }};

            let dateStrings = earnings.map(point => new Date(point.timestamp * 1e3));
            console.log(dateStrings)

            // format dates to DD.MM HH:MM
            let prevDate = null
            dateStrings = dateStrings.reverse().map(date => {
                const day = date.getDate().toString().padStart(2, '0');
                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                const label = `${day}.${month}`
                if (prevDate === label) {
                    return ' '
                } else {
                    prevDate = label
                    return label
                }
            }).reverse()
            console.log(dateStrings)

            const stakeValues = earnings.map(point => point.stake_usd);
            const poolValues = earnings.map(point => point.pool_usd);

            // Define the data for the chart
            const data = {
                labels: dateStrings, // X-axis labels
                datasets: [
                    {
                        label: 'TCY Stake earnings, $',
                        data: stakeValues, // Y-axis data
                        backgroundColor: stakeGradient,
                        borderWidth: 2,
                        borderRadius: Number.MAX_VALUE,
                        borderSkipped: false,
                        categoryPercentage: 0.99,
                        barPercentage: 0.99,
                    },
                    {
                        label: 'TCY Pool earnings, $',
                        data: poolValues, // Y-axis data
                        backgroundColor: poolGradient,
                        borderWidth: 2,
                        borderRadius: Number.MAX_VALUE,
                        borderSkipped: false,
                        categoryPercentage: 0.99,
                        barPercentage: 0.99,
                    }
                ]
            };

            // Define the configuration options
            const config = {
                type: 'bar', // Specify the chart type
                data: data,
                options: {

                    animation: false,
                    animations: {
                        colors: false,
                        x: false
                    },

                    responsive: true, // Make the chart responsive
                    maintainAspectRatio: false, // Maintain the aspect ratio
                    tooltips: {
                        enabled: false
                    },
                    scales: {
                        x: {
                            title: {
                                display: false,
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)',
                            },
                            ticks: {
                                font: {
                                    size: 16,
                                }
                            },
                        },
                        y: {
                            beginAtZero: true, // Start the Y-axis at zero
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)',
                            },
                            ticks: {
                                font: {
                                    size: 18,
                                },
                                maxTicksLimit: 10
                            },

                        },

                    },
                    plugins: {
                        title: {
                            display: true,
                        },
                        legend: {
                            display: false,
                            labels: {
                                font: {
                                    size: 20
                                }
                            }
                        },
                    }
                }
            };

            // when fonts loaded
            document.fonts.ready.then(() => {
                // Create and render the chart
                new Chart(ctx, config);
            });
        }

        function plotPriceChart() {
            // Get the context of the canvas element we want to select
            const ctx = document.getElementById('tcyPriceChart').getContext('2d');

            const earnings = {{ earnings|safe }};

            let dateStrings = earnings.map(point => (point.timestamp * 1e3));

            const priceValues = earnings.map(point => point.tcy_price);

            // Define the data for the chart
            const data = {
                labels: dateStrings, // X-axis labels
                datasets: [
                    {
                        label: 'TCY Stake earnings, $',
                        data: priceValues, // Y-axis data
                        lineColor: '#2962FF', topColor: '#2962FF', bottomColor: 'rgba(41, 98, 255, 0.28)'
                    },
                ]
            };

            // Define the configuration options
            const config = {
                type: 'line', // Specify the chart type
                data: data,
                options: {
                    animation: false,
                    animations: {
                        colors: false,
                        x: false
                    },

                    responsive: true, // Make the chart responsive
                    maintainAspectRatio: false, // Maintain the aspect ratio
                    tooltips: {
                        enabled: false
                    },
                    scales: {
                        x: {
                            display: false,
                            grid: {
                                display: true,
                                drawTicks: false,
                                drawOnChartArea: false,
                            },
                            border: {
                                display: false,
                            },
                        },
                        y: {
                            display: true,
                            grid: {
                                display: true,
                                drawTicks: true,
                                drawOnChartArea: true,
                                color: 'rgba(255, 255, 255, 0.1)',
                            },
                            border: {
                                display: false,
                            },
                            ticks: {
                                font: {
                                    size: 20,
                                },
                                maxTicksLimit: 6
                            },
                        }
                    },
                    plugins: {
                        title: {
                            display: false,
                        },
                        legend: {
                            display: false,
                        },
                    }
                }
            };

            // when fonts loaded
            document.fonts.ready.then(() => {
                // Create and render the chart
                new Chart(ctx, config);
            });
        }

        function plotTcyAllocationSunburstChart() {
            const colorTables = {
                'BTC.BTC': ['#f7931a', '#f8b348'],   // orange gradient
                'ETH.ETH': ['#627eea', '#a0b4ff'],   // blue gradient
                'LTC.LTC': ['#bfbbbb', '#bfbbbb'],   // silver
                'DOGE.DOGE': ['#c2a633', '#c2a633'], // gold
            };

            const makeRadial = (colors) =>
                new echarts.graphic.LinearGradient(0, 0, -1, 1, [
                    {offset: 0, color: colors[0]},
                    {offset: 1, color: colors[1]}
                ]);

            const vnx = {{ vnx|safe }};
            const unclaimedAssets = vnx.unclaim_info.assets;
            const sumOfUnclaimedAssets = Object.values(unclaimedAssets).reduce((a, b) => a + b, 0);

            const topUnclaimedAssets = Object.entries(unclaimedAssets)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5);

            const sumOfTopUnclaimedAssets = topUnclaimedAssets.reduce((a, b) => a + b[1], 0);
            topUnclaimedAssets.push(["Other assets", Math.max(sumOfUnclaimedAssets - sumOfTopUnclaimedAssets, 0)]);


            function normalizeAssetName(_name) {
                console.log(_name);
                // Example: "ETH.USDT-0XDAC17F..." â†’ "ETH.USDT"
                // Example: "ETH.ETH" â†’ "ETH"
                // Example: "GAIA.ATOM" â†’ "GAIA.ATOM"

                // Split into chain and asset parts
                const [chain, assetPart] = _name.split('.');
                if(!assetPart) {
                    return _name;
                }

                // Strip contract suffix after hyphen, if any
                const asset = assetPart.split('-')[0];

                // Special case: same chain and asset (ETH.ETH â†’ ETH)
                if (chain === asset) return chain;

                // Otherwise, use CHAIN.ASSET notation (but keep GAIA.ATOM intact)
                if (_name === 'GAIA.ATOM') return _name;

                return `${chain}.${asset}`;
            }

            const unclaimedChildren = topUnclaimedAssets.map(([name, value]) => {
                const colors = colorTables[name] || ['#aaaaaa', '#cccccc'];
                return {
                    name: normalizeAssetName(name),
                    amount: value,
                    itemStyle: {color: makeRadial(colors)},
                };
            });


            const data = [
                ...unclaimedChildren,
                {
                    name: 'Unclaimed',
                    depth: 1,
                    itemStyle: {color: makeRadial(['#16877a', '#136c63'])},
                    label: {
                        formatter: 'Unclaimed\n{{ pretty_money(vnx.unclaim_info.count) }} wallets ({{ short_money(vnx.unclaim_info.total * 1e-8) }} TCY)'
                    },
                },
                {
                    name: 'Claimed',
                    depth: 1,
                    itemStyle: {color: makeRadial(['#00CCFF', '#079fc5'])},
                    label: {
                        formatter: 'Claimed\n{{ pretty_money(vnx.claimed_info.count) }} wallets\n({{ short_money(vnx.claimed_info.total * 1e-8) }} TCY)'
                    },
                },
                {
                    name: 'Not staked',
                    depth: 2,
                },
                {
                    name: 'Staked',
                    depth: 2,
                    itemStyle: {color: makeRadial(['#66ffcc', '#009966'])},

                },
                {
                    name: 'Protocol',
                    depth: 3,
                },
                {
                    name: 'Treasury',
                    depth: 3,

                    itemStyle: {color: makeRadial(['#ff6333', 'rgba(255,112,51,0.93)'])}
                },
                {
                    name: 'Pool',
                    depth: 3,

                    itemStyle: {color: makeRadial(['#FF9933', '#FF9933'])}
                },
                {
                    name: 'Users',
                    depth: 3,
                }
            ];

            const linksRaw = []

            // for each unclaimedChildren make link to Unclaimed
            for (const item of unclaimedChildren) {
                linksRaw.push({
                    source: item.name,
                    target: 'Unclaimed',
                    depth: 0,
                    value: item.amount,
                })
            }
            linksRaw.push(
                {
                    source: 'Claimed',
                    target: 'Staked',
                    value: vnx.staker_info.total,
                },
                {
                    source: 'Not staked',
                    target: 'Pool',
                    value: vnx.tcy_in_pool,
                },
                {
                    source: 'Not staked',
                    target: 'Protocol',
                    value: vnx.pol_tcy,
                },
                {
                    source: 'Not staked',
                    target: 'Treasury',
                    value: vnx.treasury,
                },
                {
                    source: 'Not staked',
                    target: 'Users',
                    value: vnx.claimed_not_staked,
                },
                {
                    source: 'Claimed',
                    target: 'Not staked',
                    value: vnx.claimed_not_staked + vnx.treasury + vnx.pol_tcy + vnx.tcy_in_pool,
                },
            )

            console.log("--Nodes--")
            console.log(data)
            console.log("--Links raw--")
            console.log(linksRaw);

            const chart = echarts.init(document.getElementById("tcy-alloc-chart"));
            const option = {
                animation: false,
                series: {
                    type: 'sankey',
                    layout: 'none',
                    label: {
                        fontSize: 22,
                        color: '#ffffff',
                        fontFamily: 'ThorFontLight, monospace',
                        fontWeight: 400,
                        textBorderWidth: 0,            // remove outline
                        textBorderColor: 'transparent',
                        textShadowColor: 'rgba(0,0,0,0.7)', // dark shadow
                        textShadowBlur: 6,
                        textShadowOffsetX: 1,
                        textShadowOffsetY: 1
                    },
                    orient: 'horizontal',
                    nodeAlign: 'justify',
                    nodeWidth: 30,
                    nodeGap: 20,
                    right: 110,
                    emphasis: {
                        focus: 'adjacency'
                    },
                    data,
                    links: linksRaw,
                }
            };

            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }

        // when fonts loaded
        document.fonts.ready.then(() => {
            plotEarningsChart();
            plotPriceChart();
            plotTcyAllocationSunburstChart();
        });


    </script>

{% endblock %}
