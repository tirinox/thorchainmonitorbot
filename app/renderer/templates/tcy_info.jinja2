{% set _width, _height = set_viewport_size(1470, 1000) %}
{% extends "base.jinja2" %}

{% block content %}
    <style>
        .earnings-outer-container {
            display: flex;
            flex-direction: column;
        }

        .tcy-earnings-legend {
            margin-top: -14px;
            display: flex;
            flex-direction: row;
            gap: 14px;
            align-items: center;

            justify-content: center;
            padding-bottom: 14px;
        }

        .tcy-earnings-legend-text {
            font-size: 20px;
            text-transform: uppercase;
            letter-spacing: 0.2em;
            color: #ccc;
            font-weight: bolder;
        }

        .pool-color {
            background-color: #FF9933;
        }

        .stake-color {
            background-color: #33FF99;
        }

        .tcy-earnings-legend-circle {
            width: 32px;
            height: 16px;
            border-radius: 8px;
        }

        .earnings-chart-container {
            width: 100%;
            height: 450px;
            padding: 0 14px 14px;
            margin-bottom: 10px;
        }

        .tcy-description {
            display: none;
            font-size: 19px;
            color: #ccc;
            font-style: italic;
        }

        .price-chart-container {
            padding: 14px;
        }

        #tcyAllocationSunburstChart {
            width: 700px;
            height: 420px;
        }

        .supply-chart {

        }

        .item {
            display: flex;
            flex-direction: row;
            gap: 10px;
            font-size: 20px;
        }

        .main-container {
            display: flex;
            flex-direction: row;
            /* flex start top */
            align-items: flex-start;
            gap: 16px;
        }

        .column {
            display: flex;
            flex-direction: column;
            gap: 4px;
            flex: 1;
        }

        .columns {
            display: flex;
            flex-direction: row;
            gap: 16px;
            width: 100%;
        }

        .chain-state-name {
            font-size: 22px;
            color: #ccc;
        }

        .mimir-container {
            width: 100%;
        }

        .block-title {
            display: block;
            color: #999;
            font-size: 24px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.1rem;
            text-align: left;
            width: 100%;
            margin-bottom: 6px;
        }

        .tcy-price {
            color: #fff !important;
        }

        .glow {
            text-shadow: 0 0 4px #00ffccaa, 0 0 8px #00ffccaa, 0 0 12px #00ffcc66;
        }

    </style>

    <script src="renderer/static/js/lightweight-charts.standalone.production.js"></script>
    <script src="renderer/static/js/echarts.min.js"></script>

    {% with title="TCY INFO" %}
        {% include "components/header.jinja2" %}
    {% endwith %}

    <div class="main-container column">
        <div class="columns">
            <div class="column">
                <div class="flex">
                    <p class="tcy-description">
                        The TCY token is a native asset introduced by THORChain to address approximately $210 million
                        debt
                        accumulated by THORFiâ€™s savings and lending services. Approved through community governance via
                        Proposal
                        6,
                        TCY converts defaulted debt into equity, transforming creditors into stakeholders.
                    </p>
                </div>

                <div class="block-title">
                    <span>TCY price:</span>
                    <span class="tcy-price">
                        ${{ pretty_money(usd_per_tcy) }}
                    </span>
                </div>

                <div class="price-chart-container shadow-box">
                    <canvas id="tcyPriceChart"></canvas>
                </div>

                <div class="item">
                    <div class="item-title">Supply</div>
                    <div class="item-value">{{ tcy_total_supply }}</div>
                </div>

                <div class="item">
                    <div class="item-title">Market cap</div>
                    <div class="item-value">${{ short_money(market_cap) }}</div>
                </div>

                <div class="item">
                    <div class="item-title">Vs RUNE</div>
                    <div class="item-value">{{ pretty_money(percent_of_rune_market_cap) }}%</div>
                </div>

                <div class="item">
                    <div class="item-title">Claimed</div>
                    <div class="item-value">
                        {{ pretty_money(vnx.claimed_info.count) }} wallets
                        ({{ short_money(vnx.claimed_info.total * 1e-8) }} TCY)
                    </div>
                </div>

                <div class="item">
                    <div class="item-title">Unclaimed</div>
                    <div class="item-value">
                        {{ pretty_money(vnx.unclaim_info.count) }} wallets
                        ({{ short_money(vnx.unclaim_info.total * 1e-8) }} TCY)
                    </div>
                </div>

                <div class="supply-chart">
                    <div id="tcyAllocationSunburstChart"></div>
                </div>
            </div>


            <div class="column">
                <div class="block-title">
                    TCY earnings
                    (<span style="color: #fff">
                        <span class="glow">{{ round(status.system_income_bps_to_tcy / 100, 1) }}%</span>
                        of SYSTEM INCOME
                    </span>), USD
                </div>

                <div class="shadow-box earnings-outer-container">
                    <div class="earnings-chart-container">
                        <canvas id="tcyEarningsChart"></canvas>
                    </div>
                    <div class="tcy-earnings-legend">
                        <div class="tcy-earnings-legend-circle stake-color"></div>
                        <div class="tcy-earnings-legend-text">Stake earnings</div>
                        <div class="tcy-earnings-legend-circle pool-color"></div>
                        <div class="tcy-earnings-legend-text">Pool earnings</div>
                    </div>
                </div>

                <div class="item">
                    <div class="item-title">Earnings (7D)</div>
                    <div class="item-value">{{ pretty_money(vnx.last_week_earnings * 1e-8) }}</div>
                    <div class="item-extra">
                        (${{ pretty_money(vnx.last_week_earnings * 1e-8 * usd_per_rune) }})
                    </div>
                </div>

                <div class="item">
                    <div class="item-title">APR (7D)</div>
                    <div class="item-value">{{ pretty_money(apr_current) }}%</div>
                </div>
            </div>
        </div>


        <div class="mimir-container">
            <div class="chain-state-container cbox">
                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_claiming else 'halted' }}"></div>
                    <div class="chain-state-name">CLAIMING</div>
                </div>

                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_claiming_swap else 'halted' }}"></div>
                    <div class="chain-state-name">CLAIMING SWAP</div>
                </div>

                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_staking else 'halted' }}"></div>
                    <div class="chain-state-name">STAKING</div>
                </div>

                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_unstaking else 'halted' }}"></div>
                    <div class="chain-state-name">UNSTAKING</div>
                </div>

                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_stake_distribution else 'halted' }}"></div>
                    <div class="chain-state-name">DISTRIBUTION</div>
                </div>

                <div class="chain-state">
                    <div class="chain-state-status {{ 'ok' if not status.halt_trading else 'halted' }}"></div>
                    <div class="chain-state-name">TRADING</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        Chart.defaults.font.family = 'ThorFontLight'; // Set the font family for the chart
        Chart.defaults.color = 'rgb(200, 200, 200)'; // Set the font color for the chart

        function plotEarningsChart() {
            // Get the context of the canvas element we want to select
            const ctx = document.getElementById('tcyEarningsChart').getContext('2d');

            const stakeGradient = ctx.createLinearGradient(0, 0, 0, 200);
            stakeGradient.addColorStop(1, '#33FF99'); // Top color
            stakeGradient.addColorStop(0, '#00CCFF'); // Bottom color

            const poolGradient = ctx.createLinearGradient(0, 0, 0, 200);
            poolGradient.addColorStop(1, '#FF9933'); // Top color
            poolGradient.addColorStop(0, '#ff3388'); // Bottom color

            const earnings = {{ earnings|safe }};

            let dateStrings = earnings.map(point => new Date(point.timestamp * 1e3));
            console.log(dateStrings)

            // format dates to DD.MM HH:MM
            let prevDate = null
            dateStrings = dateStrings.reverse().map(date => {
                const day = date.getDate().toString().padStart(2, '0');
                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                const label = `${day}.${month}`
                if (prevDate === label) {
                    return ' '
                } else {
                    prevDate = label
                    return label
                }
            }).reverse()
            console.log(dateStrings)

            const stakeValues = earnings.map(point => point.stake_usd);
            const poolValues = earnings.map(point => point.pool_usd);

            // Define the data for the chart
            const data = {
                labels: dateStrings, // X-axis labels
                datasets: [
                    {
                        label: 'TCY Stake earnings, $',
                        data: stakeValues, // Y-axis data
                        backgroundColor: stakeGradient,
                        borderWidth: 2,
                        borderRadius: Number.MAX_VALUE,
                        borderSkipped: false,
                        categoryPercentage: 0.99,
                        barPercentage: 0.99,
                    },
                    {
                        label: 'TCY Pool earnings, $',
                        data: poolValues, // Y-axis data
                        backgroundColor: poolGradient,
                        borderWidth: 2,
                        borderRadius: Number.MAX_VALUE,
                        borderSkipped: false,
                        categoryPercentage: 0.99,
                        barPercentage: 0.99,
                    }
                ]
            };

            // Define the configuration options
            const config = {
                type: 'bar', // Specify the chart type
                data: data,
                options: {
                    animation: false,
                    animations: {
                        colors: false,
                        x: false
                    },

                    responsive: true, // Make the chart responsive
                    maintainAspectRatio: false, // Maintain the aspect ratio
                    tooltips: {
                        enabled: false
                    },
                    scales: {
                        x: {
                            title: {
                                display: false,
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)',
                            },
                            ticks: {
                                font: {
                                    size: 16,
                                }
                            },
                        },
                        y: {
                            beginAtZero: true, // Start the Y-axis at zero
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)',
                            },
                            ticks: {
                                font: {
                                    size: 18,
                                },
                                maxTicksLimit: 10
                            },

                        },

                    },
                    plugins: {
                        title: {
                            display: true,
                        },
                        legend: {
                            display: false,
                            labels: {
                                font: {
                                    size: 20
                                }
                            }
                        },
                    }
                }
            };

            // when fonts loaded
            document.fonts.ready.then(() => {
                // Create and render the chart
                new Chart(ctx, config);
            });
        }

        function plotPriceChart() {
            // Get the context of the canvas element we want to select
            const ctx = document.getElementById('tcyPriceChart').getContext('2d');

            const earnings = {{ earnings|safe }};

            let dateStrings = earnings.map(point => (point.timestamp * 1e3));

            const priceValues = earnings.map(point => point.tcy_price);

            // Define the data for the chart
            const data = {
                labels: dateStrings, // X-axis labels
                datasets: [
                    {
                        label: 'TCY Stake earnings, $',
                        data: priceValues, // Y-axis data
                        lineColor: '#2962FF', topColor: '#2962FF', bottomColor: 'rgba(41, 98, 255, 0.28)'
                    },
                ]
            };

            // Define the configuration options
            const config = {
                type: 'line', // Specify the chart type
                data: data,
                options: {
                    animation: false,
                    animations: {
                        colors: false,
                        x: false
                    },

                    responsive: true, // Make the chart responsive
                    maintainAspectRatio: false, // Maintain the aspect ratio
                    tooltips: {
                        enabled: false
                    },
                    scales: {
                        x: {
                            display: false,
                            grid: {
                                display: true,
                                drawTicks: false,
                                drawOnChartArea: false,
                            },
                            border: {
                                display: false,
                            },
                        },
                        y: {
                            display: true,
                            grid: {
                                display: true,
                                drawTicks: true,
                                drawOnChartArea: true,
                                color: 'rgba(255, 255, 255, 0.1)',
                            },
                            border: {
                                display: false,
                            },
                            ticks: {
                                font: {
                                    size: 20,
                                },
                                maxTicksLimit: 6
                            },
                        }
                    },
                    plugins: {
                        title: {
                            display: false,
                        },
                        legend: {
                            display: false,
                        },
                    }
                }
            };

            // when fonts loaded
            document.fonts.ready.then(() => {
                // Create and render the chart
                new Chart(ctx, config);
            });
        }

        function plotTcyAllocationSunburstChart() {
            const colorTables = {
                'BTC.BTC': ['#f7931a', '#ffcc80'],   // orange gradient
                'ETH.ETH': ['#627eea', '#a0b4ff'],   // blue gradient
                'LTC.LTC': ['#bfbbbb', '#bfbbbb'],   // silver
                'DOGE.DOGE': ['#c2a633', '#c2a633'], // gold
            };

            const makeRadial = (colors) => new echarts.graphic.RadialGradient(0.5, 0.5, 0.8, [
                {offset: 0, color: colors[0]},
                {offset: 1, color: colors[1]}
            ]);

            const vnx = {{ vnx|safe }};
            const unclaimedAssets = vnx.unclaim_info.assets;
            const sumOfUnclaimedAssets = Object.values(unclaimedAssets).reduce((a, b) => a + b, 0);

            const topUnclaimedAssets = Object.entries(unclaimedAssets)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 3);

            const sumOfTopUnclaimedAssets = topUnclaimedAssets.reduce((a, b) => a + b[1], 0);
            if (Object.keys(unclaimedAssets).length > 5) {
                topUnclaimedAssets.push(["Other", Math.max(sumOfUnclaimedAssets - sumOfTopUnclaimedAssets, 0)]);
            }

            const unclaimedChildren = topUnclaimedAssets.map(([name, value]) => {
                const colors = colorTables[name] || ['#aaaaaa', '#cccccc'];
                return {
                    name,
                    value,
                    itemStyle: {color: makeRadial(colors)},
                };
            });

            const usersValue = Math.max(
                (vnx.staker_info?.total || 0) - (vnx.pol_tcy || 0) - (vnx.tcy_in_pool || 0) - (vnx.treasury || 0),
                0
            );

            const claimedChildren = [
                {name: "POL", value: vnx.pol_tcy, itemStyle: {color: makeRadial(['#33FF99', '#009966'])}},
                {name: "Pool", value: vnx.tcy_in_pool, itemStyle: {color: makeRadial(['#00FFCC', '#0099AA'])}},
                {name: "Treasury", value: vnx.treasury, itemStyle: {color: makeRadial(['#66FFCC', '#009966'])}},
                {name: "Users", value: usersValue, itemStyle: {color: makeRadial(['#00CCFF', '#0066FF'])}},
            ];

            const data = [
                {
                    name: "Unclaimed",
                    value: sumOfUnclaimedAssets,
                    itemStyle: {color: makeRadial(['#66ffcc', '#009966'])},
                    children: unclaimedChildren
                },
                {
                    name: "Claimed",
                    value: (vnx.staker_info?.total || 0),
                    itemStyle: {color: makeRadial(['#0ba7cd', '#004d73'])},
                    children: claimedChildren
                }
            ];


            const chart = echarts.init(document.getElementById("tcyAllocationSunburstChart"));
            const option = {
                animation: false,

                series: [{
                    itemStyle: {
                        borderWidth: 0,      // remove border lines
                        gap: 2,              // add space between slices (like padding)
                    },

                    type: 'sunburst',
                    data,

                    radius: ['10%', '90%'],
                    nodeClick: 'zoomToNode',
                    sort: null,
                    startAngle: 30,
                    label: {
                        rotate: 0,    // keep labels horizontal
                        minAngle: 8,
                        formatter: '{b}',
                        fontSize: 10,
                        fontWeight: 'bold',
                        textShadowColor: 'rgba(0,0,0,0.6)',
                        textShadowBlur: 4,
                        textShadowOffsetX: 1,
                        textShadowOffsetY: 1,
                        color: '#ffffff',
                    },
                    levels: [
                        {},
                        {r0: '10%', r: '45%', label: {fontSize: 15, width: 80, overflow: 'truncate'}},
                        {r0: '45%', r: '90%', label: {fontSize: 15, width: 90, overflow: 'truncate'}},
                    ],
                    {#emphasis: {focus: 'ancestor'},#}
                }]
            };

            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }

        plotEarningsChart();
        plotPriceChart();
        plotTcyAllocationSunburstChart();

    </script>

{% endblock %}
